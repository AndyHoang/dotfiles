"let g:neocomplcache_disable_auto_complete = 1
"inoremap <expr><C-l> neocomplcache#complete_common_string()
"inoremap <expr><TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : "\<C-x>\<C-u>"
"function! s:check_back_space()"{{{
        "let col = col('.') - 1
            "return !col || getline('.')[col - 1] =~ '\s'
        "endfunction"}}
"command Bd bp | sp | bn | bd
let g:UltiSnipsExpandTrigger = '<CR>'
UnBundle 'bling/vim-bufferline'
"let g:pymode_rope_completion = 0
nnoremap <leader>pep :PymodeLintAuto<CR>
"let g:pymode_virtualenv = 0
"fix an autopairs/ycm conflict
"let g:AutoPairsMapBS = 0
"set wrap linebreak nolist
"set tw=78
"set formatoptions+=t
set noswapfile
set nobackup
set nowb
set autoread
set wrap
set linebreak
set breakindent
set showbreak=..
colorscheme base16-railscasts
set foldmethod=indent
set foldlevel=99
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
"set wrapmargin=0
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=set nospell
let g:ctrlp_cmd = 'CtrlPMRU'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#hunks#enabled = 1
let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'N',
      \ 'i'  : 'I',
      \ 'R'  : 'R',
      \ 'c'  : 'C',
      \ 'v'  : 'V',
      \ 'V'  : 'V',
      \ '' : 'V',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ '' : 'S',
      \ }
let g:jsbeautify_file = fnameescape(fnamemodify(expand("<sfile>"), ":h")."/bundle/js-beautify/beautify.js")
" Vim-Session Settings
let g:session_autosave = 'yes'
let g:session_autoload = 'yes'
let g:session_default_to_last = 1
let g:nerdtree_tabs_open_on_gui_startup = 0
set sessionoptions-=buffers
set sessionoptions-=options
let g:session_autosave ='prompt'
let g:airline#extensions#hunks#enabled = 0
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
""""""""""""""""""""""""""""""
" airline
""""""""""""""""""""""""""""""
""let g:airline_enable_branch     = 1
"let g:airline_enable_syntastic  = 1
let g:spf13_no_autochdir = 1


"let NERDTreeQuitOnOpen=0
" syntastic
let g:syntastic_quiet_messages = { "type": "style" }
"let g:syntastic_check_on_open=1
let g:syntastic_html_checkers=['']
let g:syntastic_javascript_jshint_args = '--config ~/.jshintrc'

" MatchTagAlways
let g:mta_use_matchparen_group = 0

let g:haskell_enable_quantification = 1
let g:haskell_indent_guard = 2
let g:haskell_indent_if = 3
let g:haskell_indent_where = 6
let g:haskell_enable_pattern_synonyms = 1
let g:haskell_enable_typeroles = 1
let g:haskell_enable_recursivedo = 1
let g:haskell_enable_arrowsyntax = 1
let g:haskell_indent_case = 2
let g:haskell_indent_let = 4
let g:haskell_indent_in = 1

"let g:jedi#auto_vim_configuration = 0
"let g:jedi#popup_on_dot=0

"let g:jedi#completions_enabled=1
"autocmd FileType python setlocal omnifunc=jedi#completions
"let g:neocomplete#enable_auto_select = 1
"if !exists('g:neocomplete#force_omni_input_patterns')
"        let g:neocomplete#force_omni_input_patterns = {}
"endif
"let g:neocomplete#force_omni_input_patterns.python = '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
" This is a Haskell configuration for the Vim Tagbar plugin that uses
" lushtags.
"
" Tagbar can be found at:
" http://www.vim.org/scripts/script.php?script_id=3465
" http://majutsushi.github.com/tagbar/
"
" Paste this in to your vimrc file
" OR copy this file into your .vim/plugin directory
" OR load it from your vimrc file by adding a line like:
"
" source /path/to/tagbar-haskell.vim

if executable('lushtags')
    let g:tagbar_type_haskell = {
        \ 'ctagsbin' : 'lushtags',
        \ 'ctagsargs' : '--ignore-parse-error --',
        \ 'kinds' : [
            \ 'm:module:0',
            \ 'e:exports:1',
            \ 'i:imports:1',
            \ 't:declarations:0',
            \ 'd:declarations:1',
            \ 'n:declarations:1',
            \ 'f:functions:0',
            \ 'c:constructors:0'
        \ ],
        \ 'sro' : '.',
        \ 'kind2scope' : {
            \ 'd' : 'data',
            \ 'n' : 'newtype',
            \ 'c' : 'constructor',
            \ 't' : 'type'
        \ },
        \ 'scope2kind' : {
            \ 'data' : 'd',
            \ 'newtype' : 'n',
            \ 'constructor' : 'c',
            \ 'type' : 't'
        \ }
    \ }
endif
